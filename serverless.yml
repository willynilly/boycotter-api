# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: boycotter-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createBoycott:
    handler: models/boycotts.createBoycott
    events:
      - http:
          path: boycotts
          method: post
          cors: true

  updateBoycott:
    handler: models/boycotts.updateBoycott
    events:
      - http:
          path: boycotts/{id}
          method: put
          cors: true

  getBoycotts:
    handler: models/boycotts.getBoycotts
    events:
      - http:
          path: boycotts
          method: get
          cors: true

  getBoycott:
    handler: models/boycotts.getBoycott
    events:
      - http:
          path: boycotts/{id}
          method: get
          cors: true

  deleteBoycott:
    handler: models/boycotts.deleteBoycott
    events:
      - http:
          path: boycotts/{id}
          method: delete
          cors: true

  createCompany:
    handler: models/companies.createCompany
    events:
      - http:
          path: companies
          method: post
          cors: true

  updateCompany:
    handler: models/companies.updateCompany
    events:
      - http:
          path: companies/{id}
          method: put
          cors: true

  getCompanies:
    handler: models/companies.getCompanies
    events:
      - http:
          path: companies
          method: get
          cors: true

  getCompany:
    handler: models/companies.getCompany
    events:
      - http:
          path: companies/{id}
          method: get
          cors: true

  deleteCompany:
    handler: models/companies.deleteCompany
    events:
      - http:
          path: companies/{id}
          method: delete
          cors: true

  

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  defaultTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

resources:
  Resources:
    BoycottsDynamoDbTable:
      Type: ${self:custom.defaultTable.Type}
      DeletionPolicy: ${self:custom.defaultTable.DeletionPolicy}
      Properties:
        AttributeDefinitions: ${self:custom.defaultTable.Properties.AttributeDefinitions}
        KeySchema: ${self:custom.defaultTable.Properties.KeySchema}
        ProvisionedThroughput: ${self:custom.defaultTable.Properties.ProvisionedThroughput}
        TableName: 'boycotts'
    CompaniesDynamoDbTable:
      Type: ${self:custom.defaultTable.Type}
      DeletionPolicy: ${self:custom.defaultTable.DeletionPolicy}
      Properties:
        AttributeDefinitions: ${self:custom.defaultTable.Properties.AttributeDefinitions}
        KeySchema: ${self:custom.defaultTable.Properties.KeySchema}
        ProvisionedThroughput: ${self:custom.defaultTable.Properties.ProvisionedThroughput}
        TableName: 'companies'